task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

final File userHome = file(System.getProperty('user.home'));

task installTmuxinator() {
    outputs.file "${userHome}/.tmuxinator"
    doLast {
        ant.symlink(link: "${userHome}/.tmuxinator", overwrite: true, resource: "${project.projectDir}/tmux/tmuxinator")
    }
}

task installTmux() {
    final File configFile = new File(userHome, ".tmux.conf");

    // :source-file ~/.tmux.conf
    final List<String> settings = ["source-file ${project.projectDir}/tmux/tmux.conf"];

    outputs.file configFile
    outputs.upToDateWhen { task ->
        if (!configFile.exists() || !configFile.file) {
            return false
        }

        def text = configFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                return false
            }
        }

        return true;
    }

    doLast {
        if (configFile.exists()) {
            if (configFile.isDirectory()) {
                throw new Exception("${configFile} can't be a directory")
            } else {
                logger.info "${configFile} exists"
            }
        } else {
            logger.info "creating ${configFile}";
            configFile.createNewFile()
        }
    }

    doLast {
        def text = configFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                configFile << setting << "\n"
            }
        }
    }
}

task installVim() {
    final File vimConfigFile = new File(userHome, ".vimrc");

    final List<String> settings = [
        "source ${project.projectDir}/vim/plugins.vim",
        "source ${project.projectDir}/vim/main.vim",
        "source ${project.projectDir}/vim/wikis.vim"];


    outputs.file vimConfigFile
    outputs.upToDateWhen { task ->
        if (!vimConfigFile.exists() || !vimConfigFile.file) {
            return false
        }

        def text = vimConfigFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                return false
            }
        }

        return true;
    }

    doLast {
		// used in our vim config to store temp files
		new File(userHome, ".vim-tmp/").mkdirs()
	}

    doLast {
        if (vimConfigFile.exists()) {
            if (vimConfigFile.isDirectory()) {
                throw new Exception("${vimConfigFile} can't be a directory")
            } else {
                logger.info "${vimConfigFile} exists"
            }
        } else {
            logger.info "creating ${vimConfigFile}";
            vimConfigFile.createNewFile()
        }
    }

    doLast {
        def text = vimConfigFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                vimConfigFile << setting << "\n"
            }
        }
    }
}

task installNeoVim() {
    final File neovimConfigDirectory = new File(userHome, ".config/nvim/");
    final File neoVimConfigFile = new File(neovimConfigDirectory, "init.vim");

    final List<String> settings = [
        "source ${project.projectDir}/vim/plugins.vim",
        "source ${project.projectDir}/vim/main.vim",
        "source ${project.projectDir}/vim/wikis.vim"];

    outputs.dir neovimConfigDirectory
    outputs.file neoVimConfigFile
    outputs.upToDateWhen { task ->
        if (!neoVimConfigFile.exists() || !neoVimConfigFile.file) {
            return false
        }

        def text = neoVimConfigFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                return false
            }
        }

        return true;
    }

    doLast {
        if (neoVimConfigFile.exists()) {
            if (neoVimConfigFile.isDirectory()) {
                throw new Exception("${neoVimConfigFile} can't be a directory")
            } else {
                logger.info "${neoVimConfigFile} exists"
            }
        } else {
            logger.info "creating ${neoVimConfigFile}";
            neovimConfigDirectory.mkdirs()
            neoVimConfigFile.createNewFile()
        }
    }

    doLast {
        def text = neoVimConfigFile.text

        for (setting in settings) {
            if (!text.contains(setting)) {
                neoVimConfigFile << setting << "\n"
            }
        }
    }
}

defaultTasks 'installVim', 'installNeoVim', 'installTmux', 'installTmuxinator'
